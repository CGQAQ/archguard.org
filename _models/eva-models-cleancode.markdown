---
layout: single
title: 评估·改造·守护 ｜ 整洁代码
header:
  overlay_filter: "rgba(99, 183, 175, 0.6)"
  overlay_image: /assets/images/background.jpg
sidebar:
  nav: "models"
permalink: /models/evaluate-models/clean-code/
toc: true
---

## 面向对象

> From 《Head First》
{: .notice--info}

### 面向对象基础
抽象、封装、多态、继承

### 面向对象原则
* **封装变化**： 找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起
* **针对接口编程，而不是针对实现编程**
* **多用组合，少用继承**
* **松耦合**：为了交互对象之间的松耦合设计而努力
* **开闭原则**：类应该对扩展开放，对修改关闭
* **依赖倒置**： 要依赖抽象，不要依赖具体类
* **最少知识原则**：只和你的密友谈话
* **好莱坞原则**： 别调用（打电话给）我们，我们会调用（打电话给）你
* **单一职责原则**： 一个类应该只有一个引起变化的原因

### 面向对象模式
（其中前三行为常用模式）

| 策略模式 	| 观察者模式 	| 装饰者模式 	| 工厂方法模式 	| 抽象工厂模式 	|
| 单例模式 	| 命令模式 	| 适配器模式 	| 外观模式 	| 模版方法模式 	|
| 迭代器模式 	| 组合模式 	| 状态模式 	| 代理模式 	| 复合模式 	|
| 桥接模式 	| 生成器模式 	| 责任链模式 	| 蝇量模式（Flyweight） 	| 解释器模式 	|
| 中介者模式 	| 备忘录模式 	| 原型模式 	| 访问者模式 	|  	|

#### 用模式思考
* 保持简单（Keep it simple / KISS)
* 设计模式非万灵丹；事实上，连什么丹都算不上
* 你知道何时需要模式
* 重构的实践就是模式的实践
* 拿掉你所不需要的，不要害怕将一个设计模式从你的设计中删除
* 如果你现在不需要，就别做






