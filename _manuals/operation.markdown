---
layout: default
title: 操作手册｜操作流程
header:
  overlay_filter: "rgba(99, 183, 175, 0.7)"
  overlay_image: /assets/images/background2.jpg
sidebar:
  nav: "docs"
permalink: /manuals/operation/
---

## 操作流程
**首次使用，请按顺序执行**

1. **Home**：填写项目名称（如：Dubbo）和git仓库地址（如：https://github.com/apache/dubbo.git） 

2. **项目扫描**：选择所需扫描工具，并保存配置。  

3. **系统评估**：点击评估项右侧图标，开始评估。评估时间较长，请耐心等待。（ps：目前仅有“质量评估”可用） 

4. **系统评估**：刷新右侧历史评估报告，可见最新评估报告。  

5. **系统评估**：点击评估报告，进入评估报告页。并可查看详情。

6. **分析工具-依赖分析**：启动“依赖分析”，需等待若干时间。

7. **分析工具-依赖分析**：分别查看package，module，class，method的依赖分析。

8. **分析工具-依赖分析**：右上角可进行可视化配置。



***
## 更多详情

#### Home
配置项目信息和git仓库地址。  

#### 项目扫描
扫描工具定制，按需扫描，保存后持久化存储。

#### 系统评估
评估时间较长，请耐心等待。

**质量评估**
- 变更影响
    - 散弹式提交：单次提交，改动超过n（默认为8）个文件，并且这些文件的认知复杂度发生变化。
- 模块耦合
    - 核心模块：越新（默认前100次提交），改动越频繁的模块。
    - 不稳定性：依赖的模块数/依赖的模块数+被依赖的模块数。
- 测试保护
    - 无用测试：有test bad smell（不包括DuplicateAssertTest）
    - 核心类：越新默认前100次提交，改动越频繁的类。
    - 核心模块：越新（默认前100次提交），改动越频繁的模块。

#### 分析工具
**依赖分析**
- 查看依赖：
    - package：分析package间依赖。
    - module：自定义逻辑module（若干package集合），分析逻辑module间依赖。
    - class：分析class间依赖。
    - method：分析method间依赖。

- 可视化配置：
    - 着色配置：对应节点标识颜色。
    - 隐藏配置：对应节点不可见。
    - 分析范围配置：仅可见对应节点。
